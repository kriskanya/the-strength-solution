// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   // url      = env("DATABASE_URL")
//   // url      = env("POSTGRES_URL")
//   // url      = process.env.POSTGRES_URL
// }

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String?
  firstName String?
  lastName  String?
  fullName  String?
  imageUrl  String?

  profile   Profile? @relation(fields: [profileId], references: [id]) // a User has-a Profile
  profileId Int?     @unique

  google   Json?
  facebook Json?

  ExercisePerformed            ExercisePerformed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id         Int    @id @default(autoincrement())
  gender     Gender
  bodyWeight Int
  age        Int
  height     Int // in inches

  user User? // a Profile belongs-to a User

  ExercisesOnProfiles ExercisesOnProfiles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// join table - user chooses which exercises he performs
model ExercisesOnProfiles {
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  Int // relation scalar field (used in the `@relation` attribute above)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int // relation scalar field (used in the `@relation` attribute above)

  active Boolean // indicates whether or not the user selected this exercise as one he performs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([profileId, exerciseId])
}

model Exercise {
  id           Int          @id @default(autoincrement())
  exerciseName ExerciseName
  displayName  String
  description  String
  unitOfMeasurement UnitOfMeasurementForExercise

  standards    Standard[] // an Exercise belongs-to-many Standards

  ExercisesOnProfiles          ExercisesOnProfiles[]
  ExercisePerformed            ExercisePerformed[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Standard {
  id Int @id @default(autoincrement())

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int // a Standard has-an Exercise

  level         Level
  bodyWeight    BodyWeightRange
  startRepRange Int
  endRepRange   Int
  gender        Gender
  ageRange      AgeRange

  ExercisePerformed ExercisePerformed[] // a Standard belongs-to many ExercisesPerformed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExercisePerformed {
  id            Int       @id @default(autoincrement())
  quantity      Int
  standard      Standard? @relation(fields: [standardId], references: [id]) // an ExercisePerformed has-a Standard, unless it's a non-standard exercise (i.e., DEAD_HANG, BROAD_JUMP, FARMER_CARRY)
  standardId    Int?
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId    Int
  datePerformed DateTime
  source        ExercisePerformedSource

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENUMS

enum Level {
  NOVICE
  INTERMEDIATE
  PROFICIENT
  ADVANCED
  ELITE
}

enum Gender {
  MALE
  FEMALE
}

enum ExerciseName {
  BACK_EXTENSION
  CHIN_UP
  DIP
  GOBLET_SQUAT
  INVERTED_ROW
  PULL_UP
  PUSH_UP
  BROAD_JUMP
  DEAD_HANG
  FARMER_CARRY
}

enum AgeRange {
  FOURTEEN_TO_SEVENTEEN      @map(name: "14-17")
  EIGHTEEN_TO_TWENTY_THREE   @map(name: "18-23")
  TWENTY_FOUR_TO_THIRTY_NINE @map(name: "24-39")
  FORTY_TO_FORTY_NINE        @map(name: "40-49")
  FIFTY_TO_FIFTY_NINE        @map(name: "50-59")
  SIXTY_TO_SIXTY_NINE        @map(name: "60-69")
  SEVENTY_TO_SEVENTY_NINE    @map(name: "70-79")
  EIGHTY_TO_EIGHTY_NINE      @map(name: "80-89")
}

enum BodyWeightRange {
  NINETY              @map(name: "90-99")
  ONE_HUNDRED         @map(name: "100-109")
  ONE_HUNDRED_TEN     @map(name: "110-119")
  ONE_HUNDRED_TWENTY  @map(name: "120-129")
  ONE_HUNDRED_THIRTY  @map(name: "130-139")
  ONE_HUNDRED_FORTY   @map(name: "140-149")
  ONE_HUNDRED_FIFTY   @map(name: "150-159")
  ONE_HUNDRED_SIXTY   @map(name: "160-169")
  ONE_HUNDRED_SEVENTY @map(name: "170-179")
  ONE_HUNDRED_EIGHTY  @map(name: "180-189")
  ONE_HUNDRED_NINETY  @map(name: "190-199")
  TWO_HUNDRED         @map(name: "200-209")
  TWO_HUNDRED_TEN     @map(name: "210-219")
  TWO_HUNDRED_TWENTY  @map(name: "220-229")
  TWO_HUNDRED_THIRTY  @map(name: "230-239")
  TWO_HUNDRED_FORTY   @map(name: "240-249")
  TWO_HUNDRED_FIFTY   @map(name: "250-259")
  TWO_HUNDRED_SIXTY   @map(name: "260-269")
  TWO_HUNDRED_SEVENTY @map(name: "270-279")
  TWO_HUNDRED_EIGHTY  @map(name: "280-289")
  TWO_HUNDRED_NINETY  @map(name: "290-299")
  THREE_HUNDRED       @map(name: "300-309")
  THREE_HUNDRED_TEN   @map(name: "310-319")
}

enum UnitOfMeasurementForExercise {
  REPS
  SECONDS
  INCHES
  POUNDS_PER_HAND
}

enum ExercisePerformedSource {
  UPDATE_STATS
  LOG_EXERCISE
}